import { Controller } from "react-hook-form";
import { useDropzone } from "react-dropzone";
import heic2any from "heic2any"; // –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó heic –≤ jpg
// import { nanoid } from "nanoid"; // –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö id, —Ü–µ –¥—É—É–∂–µ —Ç—Ä–µ–±–∞ –±–æ –±—É–¥—É—Ç—å —Å—Ç—Ä–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–æ–∫
import {
  DndContext, // –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä drag&drop
  closestCenter, // —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  KeyboardSensor, // —Å–µ–Ω—Å–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
  PointerSensor, // —Å–µ–Ω—Å–æ—Ä –¥–ª—è –º–∏—à–∫–∏/—Ç–∞—á
  TouchSensor, // —Å–µ–Ω—Å–æ—Ä –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
  useSensor, // —Å—Ç–≤–æ—Ä—é—î –æ–¥–∏–Ω —Å–µ–Ω—Å–æ—Ä
  useSensors, // –æ–±‚Äô—î–¥–Ω—É—î –∫—ñ–ª—å–∫–∞ —Å–µ–Ω—Å–æ—Ä—ñ–≤
} from "@dnd-kit/core";
import {
  arrayMove, // —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É –≤ –º–∞—Å–∏–≤—ñ
  SortableContext, // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è sortable-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  //   useSortable, // —Ö—É–∫, —â–æ —Ä–æ–±–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–∏–º
  horizontalListSortingStrategy, // —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ
} from "@dnd-kit/sortable";
import { restrictToHorizontalAxis } from "@dnd-kit/modifiers";
// import { CSS } from "@dnd-kit/utilities"; // —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å—Ç–∏–ª—ñ–≤ (transform —ñ transition)

import SortableItem from "./SortableItem";

const UploadImagesBox = ({ control, name, setIsLoadingState }) => {
  return (
    <Controller
      name={name}
      control={control}
      render={({ field }) => {
        // –¶–ï –í–°–ï render={............} –ø–æ–ª–µ
        const { value, onChange } = field; // field -- –º—ñ—Å—Ç–∏—Ç—å value, onChange, onBlur, name, ref

        // –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ dropzone ‚Äî noClick: true, –±–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ open()
        const {
          // acceptedFiles, // –º–∞—Å–∏–≤ —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ (–∞–±–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—É–≤).
          getRootProps, // –¥–∞—î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–æ–ø—Å–∏ –¥–ª—è "–∑–æ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, div). –¢—É–¥–∏ —Ç—Ä–µ–±–∞ "—Ä–æ–∑–∫–∏–Ω—É—Ç–∏" —Ü—ñ –ø—Ä–æ–ø—Å–∏, —â–æ–± –∑–æ–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞ –∑ drag&drop.
          getInputProps, // –¥–∞—î –ø—Ä–æ–ø—Å–∏ –¥–ª—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–≥–æ <input type="file">. –ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É react-dropzone –ø—ñ–¥–∫–ª—é—á–∞—î —Å–∏—Å—Ç–µ–º–Ω–∏–π —Ñ–∞–π–ª–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥.
          open,
        } = useDropzone({
          accept: { "image/*": [] },
          noClick: true,
          onDrop: async (files) => {
            console.log(files, "files"); // –º–∞—Å–∏–≤ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
            if (!files.length) return;

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è HEIC/HEIF –≤ JPG

            try {
              setIsLoadingState((prev) => ({
                ...prev,
                isLoadingPictures: true,
              }));

              const correctFormatFiles = await Promise.all(
                files.map(async (file) => {
                  // –í–∏—è–≤–∏–ª–æ—Å—è —â–æ –∞–π—Ñ–æ–Ω —Ä–æ–±–∏—Ç—å —Å–≤—ñ–π —Ç–∏g –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ –≤ jpg, –±–æ –≤—ñ–Ω –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
                  if (
                    file.type === "image/heic" ||
                    file.type === "image/heif"
                  ) {
                    try {
                      const convertedBlob = await heic2any({
                        blob: file,
                        toType: "image/jpeg",
                        quality: 0.9, // 90% —è–∫–æ—Å—Ç—ñ
                      });

                      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –Ω–∞ –±–∞–∑—ñ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ Blob
                      const convertedFile = new File(
                        [convertedBlob],
                        file.name.replace(/\.[^/.]+$/, ".jpg"),
                        {
                          type: "image/jpeg",
                        }
                      );

                      return convertedFile;
                    } catch (error) {
                      console.log(error, "error");
                      return file; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª, —è–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
                    }
                  }

                  return file;
                })
              );

              const newArray = [...value];
              let fileIndex = 0;

              for (
                let i = 0;
                i < newArray.length && fileIndex < correctFormatFiles.length;
                i++
              ) {
                if (!newArray[i].preview) {
                  newArray[i] = {
                    ...newArray[i],
                    file: correctFormatFiles[fileIndex],
                    preview: URL.createObjectURL(correctFormatFiles[fileIndex]),
                  };
                  fileIndex++;
                }
              }

              onChange(newArray);
            } catch (error) {
              console.log(error, "error");
            } finally {
              setIsLoadingState((prev) => ({
                ...prev,
                isLoadingPictures: false,
              }));
            }
          },
        });

        // —Å–µ–Ω—Å–æ—Ä–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è (–º–∏—à–∫–∞ + –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞)
        const sensors = useSensors(
          useSensor(PointerSensor, {
            activationConstraint: {
              delay: 250, // –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ drag (0.25s)
              tolerance: 10, // —â–æ–± –∫–ª—ñ–∫ –Ω–µ –ø–ª—É—Ç–∞–≤—Å—è –∑ drag /// –ö–æ—Ä–æ—Ç–∫–æ: –¥–æ–ø—É—Å—Ç–∏–º–∏–π ‚Äú–∑—Å—É–≤‚Äù –¥–ª—è –∫–ª—ñ–∫—É –ø–µ—Ä–µ–¥ drag.
            },
          }),
          useSensor(TouchSensor, {
            activationConstraint: {
              delay: 250, // –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ drag (0.25s)
              tolerance: 10, // —â–æ–± –∫–ª—ñ–∫ –Ω–µ –ø–ª—É—Ç–∞–≤—Å—è –∑ drag /// –ö–æ—Ä–æ—Ç–∫–æ: –¥–æ–ø—É—Å—Ç–∏–º–∏–π ‚Äú–∑—Å—É–≤‚Äù –¥–ª—è –∫–ª—ñ–∫—É –ø–µ—Ä–µ–¥ drag.
            },
          }),
          useSensor(KeyboardSensor)
        );

        // —â–æ —Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
        const handleDragEnd = (event) => {
          const { active, over } = event; // active = —â–æ —Ç—è–≥–Ω–µ–º–æ, over = –Ω–∞–¥ —á–∏–º –∑–∞—Ä–∞–∑

          if (!over || active.id === over.id) return;

          const oldIndex = value.findIndex((img) => img.id === active.id);
          const newIndex = value.findIndex((img) => img.id === over.id);

          // üö´ –∑–∞–±–æ—Ä–æ–Ω—è—î–º–æ –º—ñ–Ω—è—Ç–∏ –º—ñ—Å—Ü—è–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ–∑ –ø—É—Å—Ç–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏. –ê–ª–µ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø—Ä–∏—Å—É—Ç–Ω—è
          if (!value[newIndex].preview) return;

          onChange(arrayMove(value, oldIndex, newIndex));
        };

        const sortableContextItems = value.map((img) => img.id);

        return (
          <div className="draguble-upload-images-box">
            {/* –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π input –≤—ñ–¥ dropzone */}
            <div {...getRootProps()} style={{ display: "none" }}>
              <input {...getInputProps()} />
            </div>

            <DndContext
              sensors={sensors}
              preventDefault={true} // üëà –∫–ª—é—á –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
              modifiers={[restrictToHorizontalAxis]} // –æ–±–º–µ–∂–µ–Ω–Ω—è —Ä—É—Ö—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ
            >
              <SortableContext
                items={sortableContextItems}
                strategy={horizontalListSortingStrategy}
              >
                <div className="wrap-images">
                  {value.map((img) => (
                    <SortableItem
                      key={img.id}
                      id={img.id}
                      open={open}
                      image={img.preview}
                      onChange={onChange}
                      value={value}
                    />
                  ))}
                </div>
              </SortableContext>
            </DndContext>
          </div>
        );
      }}
    />
  );
};

export default UploadImagesBox;
